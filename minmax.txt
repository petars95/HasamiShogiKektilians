
(defun max-stanje (lsv)
  (max-stanje-i (cdr lsv) (car lsv)))

(defun max-stanje-i (lsv stanje-vrednost)
  (cond ((null lsv) stanje-vrednost)
        ((> (cadar lsv) (cadr stanje-vrednost))
         (max-stanje-i (cdr lsv) (car lsv)))
        (t (max-stanje-i (cdr lsv) stanje-vrednost))))

(defun min-stanje (lsv)
  (min-stanje-i (cdr lsv) (car lsv)))

(defun min-stanje-i (lsv stanje-vrednost)
  (cond ((null lsv) stanje-vrednost)
        ((< (cadar lsv) (cadr stanje-vrednost))
         (min-stanje-i (cdr lsv) (car lsv)))
        (t (min-stanje-i (cdr lsv) stanje-vrednost))))


(defun minimax (stanje dubina moj-potez)
  (let ((lp (nova-stanja stanje))
        (f (if moj-potez 'max-stanje 'min-stanje)))
    (cond ((or (zerop dubina) (null lp))
           (list stanje (proceni-stanje stanje)))
          (t (apply f (list (mapcar (lambda (x)
                                      (minimax x (1- dubina)
                                               (not moj-potez))) lp)))))))



///////////////SPAGETI/////////////////////////
(defun alphabeta (m_stanje dubina alpha beta moj-potez roditelj)
	(if (or (zerop dubina) (kraj_igre m_stanje))
		(list m_stanje (proc m_stanje) roditelj))
	(if (null moj-potez)
		((setq v 99999)
		(dolist	(lp (sledbenici m_stanje (figura_comp moj-potez))) '() (cadr lp)
			(setq v1 (alphabeta (car lp) (1- dubina) alpha beta drugoOdMojPotez neZnamStaJeRoditelj))
			(if (< v1 v) (setq v v1))
			(if (< beta v) (setq b beta) (setq b v))
			(if (<= b alpha) (setq lp '()))
		))
		((setq v -99999)
		(dolist	(lp (sledbenici m_stanje (figura_comp moj-potez))) '() (cadr lp)
			(setq v1 (alphabeta (car lp) (1- dubina) alpha beta drugoOdMojPotez neZnamStaJeRoditelj))
			(if (> v1 v) (setq v v1))
			(if (> alpha v) (setq a alpha) (setq a v))
			(if (<= a alpha) (setq lp '()))
		))
	)
	(cond (t v))
)




(defun nova-stanja (stanje)
  (case stanje
    ((A) '(B C D))
    ((B) '(E F))
    ((C) '(G H))
    ((D) '(I J))
    ((E) '(K L))
    ((F) '(M N))
    ((G) '(O))
    ((H) '(P Q))
    ((I) '(R S))
    ((J) '(T U))
    (t '())))

(defun proceni-stanje (stanje)
  (case stanje
    ((K) 2)
    ((L) 3)
    ((M) 5)
    ((N) 9)
    ((O) 0)
    ((P) 7)
    ((Q) 4)
    ((R) 2)
    ((S) 1)
    ((T) 5)
    ((U) 6)
    (t 0)))

(minimax 'A '3 'T)