;Globalne promenljive:
; realn - dimenzija table
; stanje - trenutno stanje table
; trenutniigrac x ili o


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;INICIJALIZACIJA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun napravi_vrstu (dim el) (cond ((equal dim '0) '())
                                             (t (cons el (napravi_vrstu (1- dim) el)))))

(defun napravi_tablu (n n1) (cond ((equal n '0) '())
                                               ((or (equal n n1) (equal n (1- n1))) (cons (napravi_vrstu n1 'X) (napravi_tablu (1- n) n1)) )
                                               ((or (equal n '1) (equal n '2)) (cons (napravi_vrstu n1 'O) (napravi_tablu (1- n) n1)) )
                                               (t (cons (napravi_vrstu n1 '-) (napravi_tablu (1- n) n1)))))
											   

(defun nova (dim)
  (progn
 (setq realn dim)   
 (setq stanje (napravi_tablu dim dim))
 (setq trenutniigrac 'x)
 (stampaj_tablu stanje)  
           )
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;STAMPANJE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


(defun kreiraj_listu_brojeva (pocetni krajnji) (cond ((equal pocetni (1+ krajnji)) '())
                                      (t (cons pocetni (kreiraj_listu_brojeva (1+ pocetni) krajnji)))))


(defun stampaj_oznake_kolona (brojevi) (cond ((null brojevi) '())
                                             ((< (car brojevi) '10) (progn (format t "~a " (car brojevi)) (stampaj_oznake_kolona (cdr brojevi))))
                                             (t (progn (format t "~a" (car brojevi)) (stampaj_oznake_kolona (cdr brojevi)))) ))

(defun stampaj_tablu_pom (tabla brojevi)
  (if (= (length tabla) realn) (progn (format t "~%   ") (stampaj_oznake_kolona (kreiraj_listu_brojeva 0 (1- realN))) (format t "~%")))
  (cond                        
   ((null (cdr tabla)) (progn (format t "~a ~{~a ~}~%~%" (car brojevi) (car tabla)) (values)))
   (t (progn (if (< (car brojevi) '10) 
                 (format t "~a  ~{~a ~}~%" (car brojevi) (car tabla)) 
                 (format t "~a ~{~a ~}~%" (car brojevi) (car tabla)) ) (stampaj_tablu_pom (cdr tabla) (cdr brojevi))))
    )
)



(defun stampaj_tablu (tabla) (stampaj_tablu_pom tabla (kreiraj_listu_brojeva 0 (1- realN))))



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;POTEZI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

												
(defun postavi (el n m mat) (cond 
                            ((= (+ n m) 0) (if   (atom (car mat))   (cons el (cdr mat))  (append (list (cons el (cdr (car mat)))) (cdr mat))))
                            ((= n 0) (if (listp (car mat)) (cons (postavi el n m (car mat)) (cdr mat)) (cons (car mat) (postavi el n (1- m) (cdr mat)))))
                            (t(cons (car mat) (postavi el (- n 1) m (cdr mat))))))
							



(defun potez (pot1 pot2 tabla igrac)                                                 
             (pojedi pot2 (postavi '- (car pot1) (cadr pot1) (postavi (nth (cadr pot1) (nth (car pot1) tabla)) (car pot2) (cadr pot2) tabla)) igrac)
  )


(defun suprotni_igrac (igrac) (if (equal igrac 'X) 'O 'X))

(defun odigraj_prikazi (pot)
  (if (validan_potez (car pot) (cadr pot) stanje trenutniigrac)
      ;then
      (progn 
              (setq stanje (potez (car pot) (cadr pot) stanje trenutniigrac))                                
              (stampaj_tablu stanje)
              (if (pobeda stanje trenutniigrac) (format t "POBEDNIK JE ~a~%~%" trenutniigrac))
              (setq trenutniigrac (suprotni_igrac trenutniigrac))
              (values)
        )
      ;else
     '(NEVALIDAN POTEZ))     
)

(defun validan_potez (p k tabla igrac)	
	(if (null (zabranaDijagonalno p k)) '()
		(if (equal igrac (nth (cadr p) (nth (car p) tabla))) 
			(if (equal (nth (cadr k) (nth (car k) tabla)) '-)
				(if (< (cadr p) (cadr k))
					(if (= (- (cadr k) (cadr p)) 2)
						t
						(if (idiDesno (list (car p) (1+ (cadr p))) k tabla) t '())
					)
					(if (> (cadr p) (cadr k))
						(if (= (- (cadr p) (cadr k)) 2)
							t
							(if (idiLevo (list (car p) (1- (cadr p))) k tabla) t '())
						)
						(if (< (car p) (car k))
							(if (= (- (car k) (car p)) 2)
								t
								(if (idiDole (list (1+ (car p)) (cadr p)) k tabla) t '())
							)
							(if (= (- (car p) (car k)) 2)
								t
								(if (idiGore (list (1- (car p)) (cadr p)) k tabla) t '())
							)
						)
					)
				)
			'() )
		'() )
	)
)



(defun zabranaDijagonalno (p k)
    (if (and (< (car p) realn)    (> (car p) '-1)    (< (car k) realn)    (> (car k) '-1)    (< (cadr p) realn)    (> (cadr p) '-1)    (< (cadr k) realn)    (> (cadr k) '-1))        
        (cond ((and (= (car p) (car k)) (not (= (cadr p) (cadr k)))) t)
                ((and (= (cadr p) (cadr k)) (not (= (car p) (car k)))) t)
                (t '())
        )
    '() )
)


(defun idiDesno (p k tabla)
	(if (equal (nth (cadr p) (nth (car p) tabla)) '-)
		(if (equal (cadr p) (cadr k))
			t
			(idiDesno (list (car p) (1+ (cadr p))) k tabla) 
		) 
	'() ) 
  )

(defun idiLevo (p k tabla)
	(if (equal (nth (cadr p) (nth (car p) tabla)) '-)
		(if (equal (cadr p) (cadr k))
			t
			(idiLevo (list (car p) (1- (cadr p))) k tabla)
		) 
	'() ) 
)

(defun idiGore (p k tabla)
	(if (equal (nth (cadr p) (nth (car p) tabla)) '-)
		(if (equal (car p) (car k))
			t
			(idiGore (list (1- (car p)) (cadr p)) k tabla) 
		) 
	'() ) 
)

(defun idiDole (p k tabla)
	(if (equal (nth (cadr p) (nth (car p) tabla)) '-)
		(if (equal (car p) (car k))
			t
			(idiDole (list (1+ (car p)) (cadr p)) k tabla)
		) 
	'() ) 
)

;polje je oblika (x y)

(defun pojedi (polje tabla igrac) (eatleft polje 1 (eatright polje 1 (eatup polje 1 (eatdown polje 1 tabla igrac) igrac) igrac) igrac))


(defun eatleft (polje smer tabla igrac)
  (cond
   ((and (equal smer 0) (equal igrac (nth (cadr polje) (nth (car polje) tabla)))) tabla)
   ((equal smer 0) (eatleft (list (car polje) (+ (cadr polje) 1)) 0 (postavi '- (car polje) (cadr polje) tabla) igrac))
   ((equal 0 (cadr polje)) tabla)
   ((equal '- (nth (- (cadr polje) 1) (nth (car polje) tabla))) tabla)
   ((equal (suprotni_igrac igrac) (nth (- (cadr polje) 1) (nth (car polje) tabla))) (eatleft (list (car polje) (- (cadr polje) 1)) 1 tabla igrac))
   ((equal igrac (nth (- (cadr polje) 1) (nth (car polje) tabla)))  (eatleft (list (car polje) (cadr polje) ) 0 tabla igrac))
   (t '(nesto ne valja))   
   )
)

(defun eatright (polje smer tabla igrac)
  (cond
   ((and (equal smer 0) (equal igrac (nth (cadr polje) (nth (car polje) tabla)))) tabla)
   ((equal smer 0) (eatright (list (car polje) (- (cadr polje) 1)) 0 (postavi '- (car polje) (cadr polje) tabla) igrac))
   ((equal (1- realn)  (cadr polje)) tabla)
   ((equal '- (nth (+ (cadr polje) 1) (nth (car polje) tabla))) tabla)
   ((equal (suprotni_igrac igrac) (nth (+ (cadr polje) 1) (nth (car polje) tabla))) (eatright (list (car polje) (+ (cadr polje) 1)) 1 tabla igrac))
   ((equal igrac (nth (+ (cadr polje) 1) (nth (car polje) tabla)))  (eatright (list (car polje) (cadr polje) ) 0 tabla igrac))
   (t '(nesto ne valja))  
  )  
)

(defun eatup (polje smer tabla igrac)
  (cond
   ((and (equal smer 0) (equal igrac (nth (cadr polje) (nth (car polje) tabla)))) tabla)
   ((equal smer 0) (eatup (list (+ (car polje) 1) (cadr polje)) 0 (postavi '- (car polje) (cadr polje) tabla) igrac))
   ((equal 0 (car polje)) tabla)
   ((equal '- (nth (cadr polje) (nth (- (car polje) 1) tabla))) tabla)
   ((equal (suprotni_igrac igrac) (nth (cadr polje) (nth (- (car polje) 1) tabla))) (eatup (list (- (car polje) 1) (cadr polje) ) 1 tabla igrac))
   ((equal igrac (nth (cadr polje) (nth (- (car polje) 1) tabla)))  (eatup (list (car polje) (cadr polje) ) 0 tabla igrac))
   (t '(nesto ne valja))  
  )  
)

(defun eatdown (polje smer tabla igrac)
  (cond
   ((and (equal smer 0) (equal igrac (nth (cadr polje) (nth (car polje) tabla)))) tabla)
   ((equal smer 0) (eatdown (list (- (car polje) 1) (cadr polje)) 0 (postavi '- (car polje) (cadr polje) tabla) igrac))
   ((equal (1- realn) (car polje)) tabla)
   ((equal '- (nth (cadr polje) (nth (+ (car polje) 1) tabla))) tabla)
   ((equal (suprotni_igrac igrac) (nth (cadr polje) (nth (+ (car polje) 1) tabla))) (eatdown (list (+ (car polje) 1) (cadr polje) ) 1 tabla igrac))
   ((equal igrac (nth (cadr polje) (nth (+ (car polje) 1) tabla)))  (eatdown (list (car polje) (cadr polje) ) 0 tabla igrac))
   (t '(nesto ne valja))   
  )  
)
											 



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;POBEDA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;



												 
(defun pobedaVert (tabla el n m count) (cond ((equal '0 count) T)
                                                       ((and (equal '1 n) (equal '0 m)) '())
                                                       ((equal '1 n) (pobedaVert tabla el (1- realn) (1- m) 4))
                                                       (t (if (and (equal (nth m (nth n tabla)) el) (equal (nth m (nth n tabla)) (nth m (nth (1- n) tabla)))) 
                                                              (pobedaVert tabla el (1- n) m (1- count)) 
                                                              (pobedaVert tabla el (1- n) m count))) ))


(defun pobedaVertX (tabla) (pobedaVert tabla 'x  (1- realn) (1- realn) 4))

(defun pobedaVertO (tabla) (pobedaVert (reverse tabla) 'O (1- realn) (1- realn) 4))	



(defun pobedaSporednaDiag (tabla el n m count) 
	(cond ((equal '0 count) T)
		((and (equal '2 n) (equal '3 m)) '())
		((and (equal '1 n) (equal (1- realn) m)) (pobedaSporednaDiag tabla el 2 (- realn '2) 4))
		((and (< n realn) (< m realn) (> m '0)) (if (and (equal (nth m (nth n tabla)) el) (equal (nth m (nth n tabla)) (nth (1- m) (nth (1+ n) tabla))))
							    (pobedaSporednaDiag tabla el (1+ n) (1- m) (1- count))
							    (pobedaSporednaDiag tabla el (1+ n) (1- m) 5)))
		((< m '1) (pobedaSporednaDiag tabla el 2 (+ (- n 3) m) 4))
		(t (pobedaSporednaDiag tabla el m (1- n) 4) ) ))
										 

(defun okreni_po_vertikali (tabla) (cond ((null tabla) '())
                                                      (t (cons (reverse (car tabla)) (okreni_po_vertikali (cdr tabla))))))

(defun pobedaSporednaDiagX (tabla) (pobedaSporednaDiag tabla 'X  (- realn 5) (- realn 1) 4))

(defun pobedaGlavnaDiagX (tabla) (pobedaSporednaDiag (okreni_po_vertikali tabla) 'X  (- realn 5) (- realn 1) 4))

(defun pobedaGlavnaDiagO (tabla) (pobedaSporednaDiag (reverse tabla) 'O  (- realn 5) (- realn 1) 4))

(defun pobedaSporednaDiagO (tabla) (pobedaSporednaDiag (okreni_po_vertikali (reverse tabla)) 'O  (- realn 5) (- realn 1) 4))

(defun preostalih (tabla el) (cond ((null tabla) '0)
                                               ((listp (car tabla)) (+ (preostalih (car tabla) el) (preostalih (cdr tabla) el)) )
                                               ((equal el (car tabla)) (1+ (preostalih (cdr tabla) el)))
                                               (t (preostalih (cdr tabla) el) )))


(defun manje_od_4_x (tabla) (if (< (preostalih tabla 'x) 4) t '()))


(defun manje_od_4_o (tabla) (if (< (preostalih tabla 'o) 4) t '()))



(defun pobeda (tabla) (if (equal trenutniigrac 'x) (pobedaX tabla) (pobedaO tabla)))

(defun pobedaX (tabla) (if (or (pobedaVertX tabla) (pobedaSporednaDiagX tabla) (pobedaGlavnaDiagX tabla) (manje_od_4_o tabla)) t '() ))

(defun pobedaO (tabla) (if (or (pobedaVertO tabla) (pobedaSporednaDiagO tabla) (pobedaGlavnaDiagO tabla) (manje_od_4_x tabla)) t '() ))






;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 2. FAZA ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


(defun lista_mogucih_poteza (tabla i j igrac)
	(cond
		((equal i realN) '())
		((not (equal igrac (nth j (nth i tabla))))
			(if (equal (1+ j) realN)
				(lista_mogucih_poteza tabla (1+ i) 0 igrac)
				(lista_mogucih_poteza tabla i (1+ j) igrac)
			)
		)
		(t (append (proveri_okolne_poteze tabla i j igrac '0 '0) (if (equal (1+ j) realN) (lista_mogucih_poteza tabla (1+ i) 0 igrac) (lista_mogucih_poteza tabla i (1+ j) igrac))))
	)
)

(defun proveri_okolne_poteze (tabla i j igrac i2 j2)
	(cond 
		((equal i2 realN) '())
		(t (if (equal j2 realN)
			(if (validan_potez (list i j) (list i2 j) tabla igrac)
				(append (list (append (list (list i j)) (list (list i2 j)))) (proveri_okolne_poteze tabla i j igrac (1+ i2) j2))
				(proveri_okolne_poteze tabla i j igrac (1+ i2) j2)
			)
			(if (validan_potez (list i j) (list i j2) tabla igrac)
				(append (list (append (list (list i j)) (list (list i j2)))) (proveri_okolne_poteze tabla i j igrac i2 (1+ j2)))
				(proveri_okolne_poteze tabla i j igrac i2 (1+ j2))
		)))
	)
)




(defun napravi_novo_stanje (tabla potez igrac) (potez (car potez) (cadr potez) tabla igrac))



(defun sledbenici_pom (tabla potezi igrac) (cond ((null potezi) '())
                                              (t (cons (napravi_novo_stanje tabla (car potezi) igrac) (sledbenici_pom tabla (cdr potezi) igrac)))))


(defun sledbenici (tabla igrac) (sledbenici_pom tabla (lista_mogucih_poteza tabla '0 '0 igrac) igrac))



(defun stampaj_sledbenike (sled) (cond ((null sled) '())
                                        (t (progn (stampaj_tablu (car sled)) (format t "~{~%~a~%~}" '(__________________)) (stampaj_sledbenike (cdr sled))))))







;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;TESTIRANJE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


// test code

(nova 9)

;proba partije za tablu 9x9

(odigraj_prikazi '((1 4) (3 4))) ;X
(odigraj_prikazi '((7 5) (4 5))) ;O

(odigraj_prikazi '((0 4) (2 4))) ;X
(odigraj_prikazi '((4 5) (3 5))) ;O

(odigraj_prikazi '((2 4) (4 4))) ;X
(odigraj_prikazi '((7 6) (3 6))) ;O

(odigraj_prikazi '((1 7) (3 7))) ;X
(odigraj_prikazi '((8 3) (6 3))) ;O

(odigraj_prikazi '((1 5) (5 5))) ;X
(odigraj_prikazi '((7 1) (6 1))) ;O

(odigraj_prikazi '((1 3) (3 3))) ;X
(odigraj_prikazi '((6 1) (7 1))) ;O

(odigraj_prikazi '((1 2) (2 2))) ;X
(odigraj_prikazi '((7 1) (6 1))) ;O

(odigraj_prikazi '((1 6) (6 6))) ;X
(odigraj_prikazi '((6 1) (7 1))) ;O


