(defun stampaj_tablu (tabla)
  (if (= (length tabla) n) (format t "~%"))
  (cond                        
                     ((null (cdr tabla)) (progn (format t "~{~a ~}" (car tabla)) (values)))
                     (t (progn (format t "~{~a ~}~%" (car tabla)) (stampaj_tablu (cdr tabla))))
                           
                     )
  )

//izbacen trenutniIgrac iz argumenata jer je globalan i smetao je

(defun validan_potez (p k tabla)	
	(if (null (zabranaDijagonalno p k)) '()
		(if (equal trenutniIgrac (nth (cadr p) (nth (car p) tabla))) 
			(if (equal (nth (cadr k) (nth (car k) tabla)) '-)
				(if (< (cadr p) (cadr k))
					(if (= (- (cadr k) (cadr p)) 2)
						t
						(if (idiDesno p k tabla) t '())
					)
					(if (> (cadr p) (cadr k))
						(if (= (- (cadr p) (cadr k)) 2)
							t
							(if (idiLevo p k tabla) t '())
						)
						(if (< (car p) (car k))
							(if (= (- (car k) (car p)) 2)
								t
								(if (idiDole p k tabla) t '())
							)
							(if (= (- (car p) (car k)) 2)
								t
								(if (idiGore p k tabla) t '())
							)
						)
					)
				)
			'() )
		'() )
	)
)


// pociscene funkcije mada moze i jos,  takodje mora i da se ubaci promenljiva "netrenutniigrac" zbog jedenja, i da se to sve zameni nakon sto
// se odigra potez

(defun potez (pot1 pot2 tabla)                                                 
             (postavi '- (car pot1) (cadr pot1) (postavi trenutniigrac (car pot2) (cadr pot2) tabla))
   )


(defun odigraj_prikazi (pot)
  (progn (setq pom (copy-tree pot)) (values)) ;zauzima novo mesto u memoriji
  (if (validan_potez (car pom) (cadr pom) stanje) 
      (setq stanje (potez (car pot) (cadr pot) stanje)) stanje)
  (stampaj_tablu stanje)
      
)

//hasanje, treba jos par testa da se uradi i da se zove nakon sto se postavi stanje u funkciji odigraj_prikazi

;polje je oblika (x y)
(defun pojedi (polje)
  (progn (eatleft polje 1) (eatright polje 1) (eatup polje 1) (eatdown polje 1) (values))
)
  
(defun eatleft (polje smer)
  (cond
   ((and (equal smer 0) (equal trenutniigrac (nth (cadr polje) (nth (car polje) stanje)))) '(uspesno svrseno))
   ((equal smer 0) (progn (setq stanje (postavi '- (car polje) (cadr polje) stanje)) (eatleft (list (car polje) (+ (cadr polje) 1)) 0)))
   ((equal 0 (cadr polje)) '(kraj table))
   ((equal '- (nth (- (cadr polje) 1) (nth (car polje) stanje))) '(crtica je))
   ((equal netrenutniigrac (nth (- (cadr polje) 1) (nth (car polje) stanje))) (eatleft (list (car polje) (- (cadr polje) 1)) 1))
   ((equal trenutniigrac (nth (- (cadr polje) 1) (nth (car polje) stanje)))  (eatleft (list (car polje) (cadr polje) ) 0))
   (t '(nesto ne valja))
   
   )
  
  )

  
(defun eatright (polje smer)
  (cond
   ((and (equal smer 0) (equal trenutniigrac (nth (cadr polje) (nth (car polje) stanje)))) '(uspesno svrseno))
   ((equal smer 0) (progn (setq stanje (postavi '- (car polje) (cadr polje) stanje)) (eatright (list (car polje) (- (cadr polje) 1)) 0)))
   ((equal 8 (cadr polje)) '(kraj table))
   ((equal '- (nth (+ (cadr polje) 1) (nth (car polje) stanje))) '(crtica je))
   ((equal netrenutniigrac (nth (+ (cadr polje) 1) (nth (car polje) stanje))) (eatright (list (car polje) (+ (cadr polje) 1)) 1))
   ((equal trenutniigrac (nth (+ (cadr polje) 1) (nth (car polje) stanje)))  (eatright (list (car polje) (cadr polje) ) 0))
   (t '(nesto ne valja))
   
   )
  
  )

(defun eatup (polje smer)
  (cond
   ((and (equal smer 0) (equal trenutniigrac (nth (cadr polje) (nth (car polje) stanje)))) '(uspesno svrseno))
   ((equal smer 0) (progn (setq stanje (postavi '- (car polje) (cadr polje) stanje)) (eatup (list (+ (car polje) 1) (cadr polje)) 0)))
   ((equal 0 (car polje)) '(kraj table))
   ((equal '- (nth (cadr polje) (nth (- (car polje) 1) stanje))) '(crtica je))
   ((equal netrenutniigrac (nth (cadr polje) (nth (- (car polje) 1) stanje))) (eatup (list (- (car polje) 1) (cadr polje) ) 1))
   ((equal trenutniigrac (nth (cadr polje) (nth (- (car polje) 1) stanje)))  (eatup (list (car polje) (cadr polje) ) 0))
   (t '(nesto ne valja))
   
   )
  
  )

(defun eatdown (polje smer)
  (cond
   ((and (equal smer 0) (equal trenutniigrac (nth (cadr polje) (nth (car polje) stanje)))) '(uspesno svrseno))
   ((equal smer 0) (progn (setq stanje (postavi '- (car polje) (cadr polje) stanje)) (eatdown (list (- (car polje) 1) (cadr polje)) 0)))
   ((equal 8 (car polje)) '(kraj table))
   ((equal '- (nth (cadr polje) (nth (+ (car polje) 1) stanje))) '(crtica je))
   ((equal netrenutniigrac (nth (cadr polje) (nth (+ (car polje) 1) stanje))) (eatdown (list (+ (car polje) 1) (cadr polje) ) 1))
   ((equal trenutniigrac (nth (cadr polje) (nth (+ (car polje) 1) stanje)))  (eatdown (list (car polje) (cadr polje) ) 0))
   (t '(nesto ne valja))
   
   )
  
  )



// test code

(setq stanje (napravi_tablu 9))
(stampaj_tablu stanje)
(setq trenutniigrac 'x)
(setq netrenutniigrac 'o)


(odigraj_prikazi '((1 4) (3 4)))
(odigraj_prikazi '((0 4) (2 4)))
(odigraj_prikazi '((2 4) (4 4)))

(setq trenutniigrac 'o)
(setq netrenutniigrac 'x)


(odigraj_prikazi '((7 5) (4 5)))
(odigraj_prikazi '((4 5) (3 5)))
(odigraj_prikazi '((7 6) (3 6)))


(setq trenutniigrac 'x)
(setq netrenutniigrac 'o)

(odigraj_prikazi '((1 7) (3 7)))
(eatleft '(3 7) 1)

(odigraj_prikazi '((1 5) (3 5)))
(eatleft '(3 5) 1)

(setq trenutniigrac 'o)
(setq netrenutniigrac 'x)

(odigraj_prikazi '((7 2) (3 2)))
(odigraj_prikazi '((7 3) (3 3)))

(setq trenutniigrac 'x)
(setq netrenutniigrac 'o)

(odigraj_prikazi '((1 1) (3 1)))
(eatleft '(1 0) 1)
(eatright '(3 1) 1)
(eatright '(3 8) 1)

//eatup-down

(setq trenutniigrac 'o)
(setq netrenutniigrac 'x)

(odigraj_prikazi '((7 2) (2 2)))
(odigraj_prikazi '((8 2) (3 2)))

(setq trenutniigrac 'x)
(setq netrenutniigrac 'o)


(odigraj_prikazi '((1 1) (4 1)))
(odigraj_prikazi '((4 1) (4 2)))
(eatup '(4 2) 1)

(setq trenutniigrac 'o)
(setq netrenutniigrac 'x)

(odigraj_prikazi '((7 3) (3 3)))
(odigraj_prikazi '((3 3) (3 2)))

(setq trenutniigrac 'x)
(setq netrenutniigrac 'o)

(odigraj_prikazi '((1 2) (2 2)))
(eatdown '(2 2) 1)
