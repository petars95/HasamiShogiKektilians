
(defun napravi_vrstu (dim el) (cond ((equal dim '0) '())
                                             (t (cons el (napravi_vrstu (1- dim) el)))))

(defun napravi_tablu1 (n n1) (cond ((equal n '0) '())
                                               ((or (equal n n1) (equal n (1- n1))) (cons (napravi_vrstu n1 'X) (napravi_tablu1 (1- n) n1)) )
                                               ((or (equal n '1) (equal n '2)) (cons (napravi_vrstu n1 'O) (napravi_tablu1 (1- n) n1)) )
                                               (t (cons (napravi_vrstu n1 '-) (napravi_tablu1 (1- n) n1)))))
											   
(defun napravi_tablu (n) (napravi_tablu1 n n))


(defun stampaj_tablu (tabla)
  (if (= (length tabla) n) (format t "~%"))
  (cond                        
                     ((null (cdr tabla)) (progn (format t "~{~a ~}" (car tabla)) (values)))
                     (t (progn (format t "~{~a ~}~%" (car tabla)) (stampaj_tablu (cdr tabla))))
                           
                     )
  )

												
(defun postavi (el n m mat) (cond 
                            ((= (+ n m) 0) (if   (atom (car mat))   (cons el (cdr mat))  (append (list (cons el (cdr (car mat)))) (cdr mat))))
                            ((= n 0) (if (listp (car mat)) (cons (postavi el n m (car mat)) (cdr mat)) (cons (car mat) (postavi el n (1- m) (cdr mat)))))
                            (t(cons (car mat) (postavi el (- n 1) m (cdr mat))))))
							



(defun potez (pot1 pot2 tabla)                                                 
             (postavi '- (car pot1) (cadr pot1) (postavi trenutniigrac (car pot2) (cadr pot2) tabla))
   )


(defun odigraj_prikazi (pot)
  (progn (setq pom (copy-tree pot)) (values)) ;zauzima novo mesto u memoriji
  (if (validan_potez (car pom) (cadr pom) stanje) 
      (progn (setq stanje (potez (car pot) (cadr pot) stanje)) (pojedi (cadr pot))) 
    stanje)
  (stampaj_tablu stanje)
      
)

											 
												 
(defun pobedaVert (tabla el dim n m count) (cond ((equal '0 count) T)
                                                       ((and (equal '1 n) (equal '0 m)) '())
                                                       ((equal '1 n) (pobedaVert tabla el dim (1- dim) (1- m) 5))
                                                       (t (if (and (equal (nth m (nth n tabla)) el) (equal (nth m (nth n tabla)) (nth m (nth (1- n) tabla)))) 
                                                              (pobedaVert tabla el dim (1- n) m (1- count)) 
                                                              (pobedaVert tabla el dim (1- n) m count))) ))


(defun pobedaVertX (tabla dim) (pobedaVert tabla 'x dim (1- dim) (1- dim) 5))

(defun pobedaVertO (tabla dim) (pobedaVert (reverse tabla) 'O dim (1- dim) (1- dim) 5))	


(defun pobedaSporednaDiag (tabla el dim n m count) 
					(cond ((equal '0 count) T)
                                              ((and (equal '2 n) (equal '3 m)) '())
                                              ((and (equal '1 n) (equal (1- dim) m)) (pobedaSporednaDiag tabla el dim 2 (- dim '2) 4))
                                              ((and (< n dim) (< m dim) (> m '0)) (if (and (equal (nth m (nth n tabla)) el) (equal (nth m (nth n tabla)) (nth (1- m) (nth (1+ n) tabla))))(pobedaSporednaDiag tabla el dim (1+ n) (1- m) (1- count))
(pobedaSporednaDiag tabla el dim (1+ n) (1- m) 5)))
                                              ((< m '1) (pobedaSporednaDiag tabla el dim 2 (+ (- n 3) m) 4))
                                              (t (pobedaSporednaDiag tabla el dim m (1- n) 4) ) ))
										 

(defun okreni_po_vertikali (tabla) (cond ((null tabla) '())
                                                      (t (cons (reverse (car tabla)) (okreni_po_vertikali (cdr tabla))))))

(defun pobedaSporednaDiagX (tabla dim) (pobedaSporednaDiag tabla 'X dim (- dim 5) (- dim 1) 4))

(defun pobedaGlavnaDiagX (tabla dim) (pobedaSporednaDiag (okreni_po_vertikali tabla) 'X dim (- dim 5) (- dim 1) 4))

(defun pobedaGlavnaDiagO (tabla dim) (pobedaSporednaDiag (reverse tabla) 'O dim (- dim 5) (- dim 1) 4))

(defun pobedaSporednaDiagO (tabla dim) (pobedaSporednaDiag (okreni_po_vertikali (reverse tabla)) 'O dim (- dim 5) (- dim 1) 4))


(defun pobedaX (tabla dim) (if (or (pobedaVertX tabla dim) (pobedaSporednaDiagX tabla dim) (pobedaGlavnaDiagX tabla dim) (manje_od_4_o tabla)) T '() ))

(defun pobedaO (tabla dim) (if (or (pobedaVertO tabla dim) (pobedaSporednaDiagO tabla dim) (pobedaGlavnaDiagO tabla dim) (manje_od_4_x tabla)) T '() ))

(defun preostalih (tabla el) (cond ((null tabla) '0)
                                               ((listp (car tabla)) (+ (preostalih (car tabla) el) (preostalih (cdr tabla) el)) )
                                               ((equal el (car tabla)) (1+ (preostalih (cdr tabla) el)))
                                               (t (preostalih (cdr tabla) el) )))


(defun manje_od_4_x (tabla) (if (< (preostalih tabla 'x) 4) t '()))


(defun manje_od_4_o (tabla) (if (< (preostalih tabla 'o) 4) t '()))

(defun validan_potez (p k tabla)	
	(if (null (zabranaDijagonalno p k)) '()
		(if (equal trenutniIgrac (nth (cadr p) (nth (car p) tabla))) 
			(if (equal (nth (cadr k) (nth (car k) tabla)) '-)
				(if (< (cadr p) (cadr k))
					(if (= (- (cadr k) (cadr p)) 2)
						t
						(if (idiDesno p k tabla) t '())
					)
					(if (> (cadr p) (cadr k))
						(if (= (- (cadr p) (cadr k)) 2)
							t
							(if (idiLevo p k tabla) t '())
						)
						(if (< (car p) (car k))
							(if (= (- (car k) (car p)) 2)
								t
								(if (idiDole p k tabla) t '())
							)
							(if (= (- (car p) (car k)) 2)
								t
								(if (idiGore p k tabla) t '())
							)
						)
					)
				)
			'() )
		'() )
	)
)



(defun zabranaDijagonalno (p k)
    (if (and (< (car p) N)    (> (car p) '-1)    (< (car k) N)    (> (car k) '-1)    (< (cadr p) N)    (> (cadr p) '-1)    (< (cadr k) N)    (> (cadr k) '-1))        
        (cond ((and (= (car p) (car k)) (not (= (cadr p) (cadr k)))) t)
                ((and (= (cadr p) (cadr k)) (not (= (car p) (car k)))) t)
                (t '())
        )
    '() )
)


(defun idiDesno (p k tabla)
	(incf (cadr p))
	(if (equal (nth (cadr p) (nth (car p) tabla)) '-)
		(if (equal (cadr p) (cadr k))
			t
			(idiDesno p k tabla) 
		) 
	'() ) 
)

(defun idiLevo (p k tabla)
	(decf (cadr p))
	(if (equal (nth (cadr p) (nth (car p) tabla)) '-)
		(if (equal (cadr p) (cadr k))
			t
			(idiLevo p k tabla)
		) 
	'() ) 
)

(defun idiGore (p k tabla)
	(decf (car p))
	(if (equal (nth (cadr p) (nth (car p) tabla)) '-)
		(if (equal (car p) (car k))
			t
			(idiGore p k tabla) 
		) 
	'() ) 
)

(defun idiDole (p k tabla)
	(incf (car p))
	(if (equal (nth (cadr p) (nth (car p) tabla)) '-)
		(if (equal (car p) (car k))
			t
			(idiDole p k tabla)
		) 
	'() ) 
)

;polje je oblika (x y)
(defun pojedi (polje)
  (progn (eatleft polje 1) (eatright polje 1) (eatup polje 1) (eatdown polje 1) (values))
)
  
(defun eatleft (polje smer)
  (cond
   ((and (equal smer 0) (equal trenutniigrac (nth (cadr polje) (nth (car polje) stanje)))) '(uspesno svrseno))
   ((equal smer 0) (progn (setq stanje (postavi '- (car polje) (cadr polje) stanje)) (eatleft (list (car polje) (+ (cadr polje) 1)) 0)))
   ((equal 0 (cadr polje)) '(kraj table))
   ((equal '- (nth (- (cadr polje) 1) (nth (car polje) stanje))) '(crtica je))
   ((equal netrenutniigrac (nth (- (cadr polje) 1) (nth (car polje) stanje))) (eatleft (list (car polje) (- (cadr polje) 1)) 1))
   ((equal trenutniigrac (nth (- (cadr polje) 1) (nth (car polje) stanje)))  (eatleft (list (car polje) (cadr polje) ) 0))
   (t '(nesto ne valja))
   
   )
  
  )

  
(defun eatright (polje smer)
  (cond
   ((and (equal smer 0) (equal trenutniigrac (nth (cadr polje) (nth (car polje) stanje)))) '(uspesno svrseno))
   ((equal smer 0) (progn (setq stanje (postavi '- (car polje) (cadr polje) stanje)) (eatright (list (car polje) (- (cadr polje) 1)) 0)))
   ((equal 8 (cadr polje)) '(kraj table))
   ((equal '- (nth (+ (cadr polje) 1) (nth (car polje) stanje))) '(crtica je))
   ((equal netrenutniigrac (nth (+ (cadr polje) 1) (nth (car polje) stanje))) (eatright (list (car polje) (+ (cadr polje) 1)) 1))
   ((equal trenutniigrac (nth (+ (cadr polje) 1) (nth (car polje) stanje)))  (eatright (list (car polje) (cadr polje) ) 0))
   (t '(nesto ne valja))
   
   )
  
  )

(defun eatup (polje smer)
  (cond
   ((and (equal smer 0) (equal trenutniigrac (nth (cadr polje) (nth (car polje) stanje)))) '(uspesno svrseno))
   ((equal smer 0) (progn (setq stanje (postavi '- (car polje) (cadr polje) stanje)) (eatup (list (+ (car polje) 1) (cadr polje)) 0)))
   ((equal 0 (car polje)) '(kraj table))
   ((equal '- (nth (cadr polje) (nth (- (car polje) 1) stanje))) '(crtica je))
   ((equal netrenutniigrac (nth (cadr polje) (nth (- (car polje) 1) stanje))) (eatup (list (- (car polje) 1) (cadr polje) ) 1))
   ((equal trenutniigrac (nth (cadr polje) (nth (- (car polje) 1) stanje)))  (eatup (list (car polje) (cadr polje) ) 0))
   (t '(nesto ne valja))
   
   )
  
  )

(defun eatdown (polje smer)
  (cond
   ((and (equal smer 0) (equal trenutniigrac (nth (cadr polje) (nth (car polje) stanje)))) '(uspesno svrseno))
   ((equal smer 0) (progn (setq stanje (postavi '- (car polje) (cadr polje) stanje)) (eatdown (list (- (car polje) 1) (cadr polje)) 0)))
   ((equal 8 (car polje)) '(kraj table))
   ((equal '- (nth (cadr polje) (nth (+ (car polje) 1) stanje))) '(crtica je))
   ((equal netrenutniigrac (nth (cadr polje) (nth (+ (car polje) 1) stanje))) (eatdown (list (+ (car polje) 1) (cadr polje) ) 1))
   ((equal trenutniigrac (nth (cadr polje) (nth (+ (car polje) 1) stanje)))  (eatdown (list (car polje) (cadr polje) ) 0))
   (t '(nesto ne valja))
   
   )
  
  )

