
(defun napravi_vrstu (dim el) (cond ((equal dim '0) '())
                                             (t (cons el (napravi_vrstu (1- dim) el)))))

(defun napravi_tablu1 (n n1) (cond ((equal n '0) '())
                                               ((or (equal n n1) (equal n (1- n1))) (cons (napravi_vrstu n1 'X) (napravi_tablu1 (1- n) n1)) )
                                               ((or (equal n '1) (equal n '2)) (cons (napravi_vrstu n1 'O) (napravi_tablu1 (1- n) n1)) )
                                               (t (cons (napravi_vrstu n1 '-) (napravi_tablu1 (1- n) n1)))))
											   
(defun napravi_tablu (n) (napravi_tablu1 n n))


(defun stampaj_tablu (tabla) (cond ((null tabla) '())
                                                (t (progn (format t "~{~a ~}~%" (car tabla)) (stampaj_tablu (cdr tabla))))))

												
(defun postavi (el n m mat) (cond 
                            ((= (+ n m) 0) (if   (atom (car mat))   (cons el (cdr mat))  (append (list (cons el (cdr (car mat)))) (cdr mat))))
                            ((= n 0) (if (listp (car mat)) (cons (postavi el n m (car mat)) (cdr mat)) (cons (car mat) (postavi el n (1- m) (cdr mat)))))
                            (t(cons (car mat) (postavi el (- n 1) m (cdr mat))))))
							



(defun potez (potez tabla) (let ((i1 (caar potez)) (j1 (cadar potez)) (i2 (caadr potez)) (j2 (car (cdr (car (cdr potez)))))) 
                                                 (if (validan_potez (car potez) (cadr potez) tabla trenutniIgrac) 
                                                     (postavi '- i1 j1 (postavi (nth j1 (nth i1 tabla)) i2 j2 tabla)) 
                                                     '()) ))

(defun odigraj_prikazi (pot)
  (progn (if (validan_potez (car pot) (cadr pot) stanje trenutniIgrac) 
	     (progn (setq stanje (potez pot stanje)) (if (equal trenutniIgrac 'x) (setq trenutniIgrac 'x) (setq trenutniIgrac 'o))) '()) (stampaj_tablu stanje))
 )

											 
												 
(defun pobedaVert (tabla el dim n m count) (cond ((equal '0 count) T)
                                                       ((and (equal '1 n) (equal '0 m)) '())
                                                       ((equal '1 n) (pobedaVert tabla el dim (1- dim) (1- m) 5))
                                                       (t (if (and (equal (nth m (nth n tabla)) el) (equal (nth m (nth n tabla)) (nth m (nth (1- n) tabla)))) 
                                                              (pobedaVert tabla el dim (1- n) m (1- count)) 
                                                              (pobedaVert tabla el dim (1- n) m count))) ))


(defun pobedaVertX (tabla dim) (pobedaVert tabla 'x dim (1- dim) (1- dim) 5))

(defun pobedaVertO (tabla dim) (pobedaVert (reverse tabla) 'O dim (1- dim) (1- dim) 5))	


(defun pobedaSporednaDiag (tabla el dim n m count) 
					(cond ((equal '0 count) T)
                                              ((and (equal '2 n) (equal '3 m)) '())
                                              ((and (equal '1 n) (equal (1- dim) m)) (pobedaSporednaDiag tabla el dim 2 (- dim '2) 4))
                                              ((and (< n dim) (< m dim) (> m '0)) (if (and (equal (nth m (nth n tabla)) el) (equal (nth m (nth n tabla)) (nth (1- m) (nth (1+ n) tabla))))(pobedaSporednaDiag tabla el dim (1+ n) (1- m) (1- count))
(pobedaSporednaDiag tabla el dim (1+ n) (1- m) 5)))
                                              ((< m '1) (pobedaSporednaDiag tabla el dim 2 (+ (- n 3) m) 4))
                                              (t (pobedaSporednaDiag tabla el dim m (1- n) 4) ) ))
										 

(defun okreni_po_vertikali (tabla) (cond ((null tabla) '())
                                                      (t (cons (reverse (car tabla)) (okreni_po_vertikali (cdr tabla))))))

(defun pobedaSporednaDiagX (tabla dim) (pobedaSporednaDiag tabla 'X dim (- dim 5) (- dim 1) 4))

(defun pobedaGlavnaDiagX (tabla dim) (pobedaSporednaDiag (okreni_po_vertikali tabla) 'X dim (- dim 5) (- dim 1) 4))

(defun pobedaGlavnaDiagO (tabla dim) (pobedaSporednaDiag (reverse tabla) 'O dim (- dim 5) (- dim 1) 4))

(defun pobedaSporednaDiagO (tabla dim) (pobedaSporednaDiag (okreni_po_vertikali (reverse tabla)) 'O dim (- dim 5) (- dim 1) 4))


(defun pobedaX (tabla dim) (if (or (pobedaVertX tabla dim) (pobedaSporednaDiagX tabla dim) (pobedaGlavnaDiagX tabla dim)) T '() ))

(defun pobedaO (tabla dim) (if (or (pobedaVertO tabla dim) (pobedaSporednaDiagO tabla dim) (pobedaGlavnaDiagO tabla dim)) T '() ))

(defun validan_potez (p k tabla trenutniIgrac)	
	(if (null (zabranaDijagonalno p k)) '()
		(if (equal trenutniIgrac (nth (cadr p) (nth (car p) tabla))) 
			(if (equal (nth (cadr k) (nth (car k) tabla)) '-)
				(if (< (cadr p) (cadr k))
					(if (= (- (cadr k) (cadr p)) 2)
						t
						(if (idiDesno p k tabla) t '())
					)
					(if (> (cadr p) (cadr k))
						(if (= (- (cadr p) (cadr k)) 2)
							t
							(if (idiLevo p k tabla) t '())
						)
						(if (< (car p) (car k))
							(if (= (- (car k) (car p)) 2)
								t
								(if (idiDole p k tabla) t '())
							)
							(if (= (- (car p) (car k)) 2)
								t
								(if (idiGore p k tabla) t '())
							)
						)
					)
				)
			'() )
		'() )
	)
)



(defun zabranaDijagonalno (p k)
    (if (and (< (car p) N)    (> (car p) '-1)    (< (car k) N)    (> (car k) '-1)    (< (cadr p) N)    (> (cadr p) '-1)    (< (cadr k) N)    (> (cadr k) '-1))        
        (cond ((and (= (car p) (car k)) (not (= (cadr p) (cadr k)))) t)
                ((and (= (cadr p) (cadr k)) (not (= (car p) (car k)))) t)
                (t '())
        )
    '() )
)


(defun idiDesno (p k tabla)
	(incf (cadr p))
	(if (equal (nth (cadr p) (nth (car p) tabla)) '-)
		(if (equal (cadr p) (cadr k))
			t
			(idiDesno p k tabla) 
		) 
	'() ) 
)

(defun idiLevo (p k tabla)
	(decf (cadr p))
	(if (equal (nth (cadr p) (nth (car p) tabla)) '-)
		(if (equal (cadr p) (cadr k))
			t
			(idiLevo p k tabla)
		) 
	'() ) 
)

(defun idiGore (p k tabla)
	(decf (car p))
	(if (equal (nth (cadr p) (nth (car p) tabla)) '-)
		(if (equal (car p) (car k))
			t
			(idiGore p k tabla) 
		) 
	'() ) 
)

(defun idiDole (p k tabla)
	(incf (car p))
	(if (equal (nth (cadr p) (nth (car p) tabla)) '-)
		(if (equal (car p) (car k))
			t
			(idiDole p k tabla)
		) 
	'() ) 
)