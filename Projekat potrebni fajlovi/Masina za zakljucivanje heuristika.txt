
(defun !eq (a b)
  (equal a b))

(defun !ne (a b)
  (not (equal a b)))


(defun =dec (x) (1- x))
(defun =inc (x) (1+ x))

(defun =inc2 (x) (+ x 2))
(defun =dec2 (x) (- x 2))

(defun =inc3 (x) (+ x 3))
(defun =dec3 (x) (- x 3))

(defun =inc4 (x) (+ x 4))
(defun =dec4 (x) (- x 4))
(defun =div (n) (floor(/ n 2)))


(defparameter *T1-RULES* '(                           
                           ;vertikalno 2 u nizu
                           (IF (AND (On x ?i ?j) (On x (=inc ?i) ?j)) THEN (Dva-u-nizu-x  ?i ?j))
                           (IF (AND (On o ?i ?j) (On o (=dec ?i) ?j)) THEN (Dva-u-nizu-o  ?i ?j))
                           
                           ;glavna dijagonala - 2 u nizu
                           (IF (AND (On x ?i ?j) (On x (=inc ?i) (=inc ?j))) THEN (Dva-u-nizu-x  ?i ?j))
                           (IF (AND (On o ?i ?j) (On o (=dec ?i) (=dec ?j))) THEN (Dva-u-nizu-o  ?i ?j))
                           
                           ;sporedna dijagonala - 2 u nizu
                           (IF (AND (On x ?i ?j) (On x (=inc ?i) (=dec ?j))) THEN (Dva-u-nizu-x  ?i ?j))
                           (IF (AND (On o ?i ?j) (On o (=dec ?i) (=inc ?j))) THEN (Dva-u-nizu-o  ?i ?j))
                           
                           ;vertikalno 3 u nizu
                           (IF (AND (On x ?i ?j) (On x (=inc ?i) ?j) (On x (=inc2 ?i) ?j)   ) THEN (Tri-u-nizu-x ?i ?j))
                           (IF (AND (On o ?i ?j) (On o (=dec ?i) ?j) (On o (=dec2 ?i) ?j)   ) THEN (Tri-u-nizu-o ?i ?j))
                           
                           ;glavna dijagonala - 3 u nizu
                           (IF (AND (On x ?i ?j) (On x (=inc ?i) (=inc ?j)) (On x (=inc2 ?i) (=inc2 ?j))   ) THEN (Tri-u-nizu-x ?i ?j))
                           (IF (AND (On o ?i ?j) (On o (=dec ?i) (=dec ?j)) (On o (=dec2 ?i) (=dec2 ?j))   ) THEN (Tri-u-nizu-o ?i ?j))
                           
                           ;sporedna dijagonala - 3 u nizu
                           (IF (AND (On x ?i ?j) (On x (=inc ?i) (=dec ?j)) (On x (=inc2 ?i) (=dec2 ?j))   ) THEN (Tri-u-nizu-x ?i ?j))
                           (IF (AND (On o ?i ?j) (On o (=dec ?i) (=inc ?j)) (On o (=dec2 ?i) (=inc2 ?j))   ) THEN (Tri-u-nizu-o ?i ?j))
          
                           ;vertikalno 4 u nizu
                           (IF (AND (On x ?i ?j) (On x (=inc ?i) ?j) (On x (=inc2 ?i) ?j) (On x (=inc3 ?i) ?j) ) THEN (Cetri-u-nizu-x ?i ?j))
                           (IF (AND (On o ?i ?j) (On o (=dec ?i) ?j) (On o (=dec2 ?i) ?j) (On o (=dec3 ?i) ?j) ) THEN (Cetri-u-nizu-o ?i ?j))

                           ;glavna dijagonala - 4 u nizu
                           (IF (AND (On x ?i ?j) (On x (=inc ?i) (=inc ?j)) (On x (=inc2 ?i) (=inc2 ?j)) (On x (=inc3 ?i) (=inc3 ?j)) ) THEN (Cetri-u-nizu-x ?i ?j))
                           (IF (AND (On o ?i ?j) (On o (=dec ?i) (=dec ?j)) (On o (=dec2 ?i) (=dec2 ?j)) (On o (=dec3 ?i) (=dec3 ?j)) ) THEN (Cetri-u-nizu-o ?i ?j))

                           ;sporedna dijagonala - 4 u nizu
                           (IF (AND (On x ?i ?j) (On x (=inc ?i) (=dec ?j)) (On x (=inc2 ?i) (=dec2 ?j)) (On x (=inc3 ?i) (=dec3 ?j)) ) THEN (Cetri-u-nizu-x ?i ?j))
                           (IF (AND (On o ?i ?j) (On o (=dec ?i) (=inc ?j)) (On o (=dec2 ?i) (=inc2 ?j)) (On o (=dec3 ?i) (=inc3 ?j)) ) THEN (Cetri-u-nizu-o ?i ?j))

                           ;mid or fid
                           (IF (AND (ON x ?i ?j) (!eq ?i (=div REALN)) (!eq ?j (=div REALN))    ) THEN (MID-OR-FID-x ?i ?j))
                        
	))

(defun napravi_cinjenice (tabla i j) (cond ((equal i realn) '())
                                           ((equal j realn) (napravi_cinjenice tabla (1+ i) '0))
                                           ((equal '- (nth j (nth i tabla))) (napravi_cinjenice tabla i (1+ j)))
                                           (t (cons (list 'On (nth j (nth i tabla)) i j) (napravi_cinjenice tabla i (1+ j)) )) ))


(defun proc (tabla)
                     
  (progn (defparameter *T1-FACTS* (napravi_cinjenice tabla 0 0)) (prepare-knowledge *T1-RULES* *T1-FACTS* 10) 
    
    (let ((x2 (count-results '(AND (Dva-u-nizu-x ?i ?j) (!ne ?i 1) (!ne ?i 0)))) 
          (o2 (count-results '(AND (Dva-u-nizu-o ?i ?j) (!ne ?i (- realn 1)) (!ne ?i (- realn 2)))))) 
       
    (+ (count-results '(On x ?i ?j))
       (* (count-results '(On o ?i ?j)) -1)
       (* x2 0.1)
       (* o2 -0.1)
       (if (not (equal x2 0))
         (+
           (* (count-results '(AND (Tri-u-nizu-x ?i ?j) (!ne ?i 1) (!ne ?i 0))) 0.25)           
           (* (count-results '(AND (Cetri-u-nizu-x ?i ?j) (!ne ?i 1) (!ne ?i 0))) 0.85)
         )
          0)
       (if (not (equal o2 0))
         (+          
           (* (count-results '(AND (Tri-u-nizu-o ?i ?j) (!ne ?i (- realn 1)) (!ne ?i (- realn 2)))) -0.25)
           (* (count-results '(AND (Cetri-u-nizu-o ?i ?j) (!ne ?i (- realn 1)) (!ne ?i (- realn 2)))) -0.85)
         )
          0)
       (* (count-results '(MID-OR-FID-x ?i ?j)) 0.1)

     )
    )))
    

(defun igraj () 
    (progn 

      (print "Unesite potez:") 

      (setq potez_igraca (read))

      (if  (validan_potez (car potez_igraca) (cadr potez_igraca) stanje trenutniigrac)
        (progn 
           (setq stanje (potez (car potez_igraca) (cadr potez_igraca) stanje trenutniigrac))
           (stampaj_tablu stanje)
           (setq trenutniigrac (suprotni_igrac trenutniigrac))
           (values)
        )
        (progn (print "NEVALIDAN POTEZ") (igraj))
        )

      (if (pobeda stanje (suprotni_igrac trenutniigrac)) (format t "POBEDNIK JE ~a~%~%" (suprotni_igrac trenutniigrac))
      (progn 
           (setq stanje (caddr (alphabeta stanje 2 -100 100 '() '())))
           (stampaj_tablu stanje)
           (if (pobeda stanje trenutniigrac) (format t "POBEDNIK JE ~a~%~%" trenutniigrac))
           (setq trenutniigrac (suprotni_igrac trenutniigrac))
           (if (pobeda stanje (suprotni_igrac trenutniigrac)) 
               (format t "POBEDNIK JE ~a~%~%" (suprotni_igrac trenutniigrac))
               (igraj))
        ))
     )
 )


              

;tesriranje
; (nova 9)

; (proc stanje '())

; (stampaj_tablu (caddr (alphabeta stanje 2 -100 100 t '())))
; (stampaj_tablu (setq stanje (caddr (alphabeta stanje 2 -100 100 t '()))))
; (proc (caddr (alphabeta stanje 2 -100 100 t '())) t)

; (stampaj_tablu (setq stanje(caddr (alphabeta stanje 2 -100 100 '() '()))))


; (proc (caddr (alphabeta stanje 2 -100 100 '() '())) '())
